{"version":3,"sources":["utils/htmlForFeature.js","utils/formatter.js","components/layers/UsaDemographicsLayer.js","components/layers/StoresLayer.js","data/sources/storesSource.js","data/sources/usaDemographicsSource.js","components/views/Stores.js"],"names":["FORMATTER_TYPES","Object","freeze","CURRENCY","NUMBER","formatterFunctions","value","formatted","currencyFormatter","prefix","numberFormatter","DEFAULT_FORMATTER","type","columns","htmlForFeature","title","feature","formatter","includeColumns","showColumnName","Error","propertyNames","keys","properties","supportedTypes","values","includes","isArrayOfStrings","column","available","join","isFormatterValid","includedColumnsAreValid","html","name","generateHtml","propertyName","formatterFunction","v","concat","Array","isArray","length","every","String","DEFAULT_LOCALE","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","notation","compactDisplay","format","isNaN","_value","parseLogicalOperation","operation","replace","USA_DEMOGRAPHICS_LAYER_ID","UsaDemographicsLayer","usaDemographicsLayer","useSelector","state","carto","layers","source","selectSourceById","cartoLayerProps","useCartoLayerProps","CartoLayer","id","getFillColor","pointRadiusMinPixels","pickable","onHover","info","object","style","STORES_LAYER_ID","StoresLayer","storesLayer","MAP_TYPES","QUERY","connection","data","TILESET","useStyles","makeStyles","stores","Stores","dispatch","useDispatch","classes","useEffect","addSource","storesSource","usaDemographicsSource","addLayer","removeLayer","removeSource","Grid","container","direction","className","item","dataSource","AggregationTypes","SUM","Divider","operationColumn"],"mappings":"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","file":"static/js/12.cb957bba.chunk.js","sourcesContent":["import { currencyFormatter, numberFormatter } from 'utils/formatter';\n\nconst FORMATTER_TYPES = Object.freeze({\n  CURRENCY: 'currency',\n  NUMBER: 'number',\n});\n\nconst formatterFunctions = {\n  [FORMATTER_TYPES.CURRENCY](value) {\n    const formatted = currencyFormatter(value);\n    return `${formatted.prefix}${formatted.value}`;\n  },\n  [FORMATTER_TYPES.NUMBER](value) {\n    return numberFormatter(value);\n  },\n};\n\nconst DEFAULT_FORMATTER = {\n  type: '',\n  columns: [],\n};\n\nexport default function htmlForFeature({\n  title,\n  feature,\n  formatter = DEFAULT_FORMATTER,\n  includeColumns = '*',\n  showColumnName = true,\n}) {\n  if (!feature) {\n    throw new Error(`htmlForFeature needs \"info.object\" information`);\n  }\n\n  const propertyNames = Object.keys(feature.properties);\n\n  if (\n    formatter?.type &&\n    formatter?.columns &&\n    !isFormatterValid(propertyNames, formatter)\n  ) {\n    return;\n  }\n\n  if (!includedColumnsAreValid(propertyNames, includeColumns)) {\n    return;\n  }\n\n  let html = '';\n\n  if (title) {\n    html = `<h3 style=\"margin: 0\"><strong>${title}</strong></h3>`;\n  }\n\n  for (const name of propertyNames) {\n    if (\n      name !== 'layerName' &&\n      (includeColumns.includes(name) || includeColumns === '*')\n    ) {\n      if (formatter?.columns.includes(name)) {\n        const formatterFunction = formatterFunctions[formatter.type];\n        html = generateHtml(feature, name, showColumnName, html, formatterFunction);\n      } else {\n        html = generateHtml(feature, name, showColumnName, html);\n      }\n    }\n  }\n\n  return html;\n}\n\nfunction generateHtml(\n  feature,\n  propertyName,\n  showColumnName,\n  html,\n  formatterFunction = (v) => v\n) {\n  return html.concat(\n    `${showColumnName ? `<strong>${propertyName}</strong>: ` : ''}${formatterFunction(\n      feature.properties[propertyName]\n    )}<br/>`\n  );\n}\n\nfunction isFormatterValid(properties, formatter) {\n  const supportedTypes = Object.values(FORMATTER_TYPES);\n\n  if (!supportedTypes.includes(formatter.type)) {\n    throw new Error(\n      `\"${formatter.type}\" is not supported as formatter, use one of \"${supportedTypes}\"`\n    );\n  }\n\n  if (!isArrayOfStrings(formatter.columns)) {\n    throw new Error(`\"formatter.columns\" property needs to be an array of strings`);\n  }\n\n  for (const column of formatter.columns) {\n    if (!properties.includes(column)) {\n      const available = properties.join(', ');\n      throw new Error(\n        `\"formatted.columns\" includes '${column}' but it was not found!. Available cols are [${available}]`\n      );\n    }\n  }\n\n  return true;\n}\n\nfunction includedColumnsAreValid(properties, includeColumns) {\n  if (includeColumns === '*') {\n    return true;\n  }\n\n  if (!isArrayOfStrings(includeColumns)) {\n    throw new Error(\n      `\"includeColumns\" property needs to be an array of existing feature columns or \"*\"`\n    );\n  }\n\n  if (isArrayOfStrings(includeColumns)) {\n    for (const column of includeColumns) {\n      if (!properties.includes(column)) {\n        throw new Error('colums set in \"includeColumns\" should exist in picked feature');\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isArrayOfStrings(value) {\n  return Array.isArray(value) && value.length && value.every(String);\n}\n","// int-numberformat dependencies (support for ios v13)\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-getcanonicallocales/polyfill';\n\n// int-pluralrules dependencies (support for ios v12)\nimport '@formatjs/intl-pluralrules/polyfill';\nimport '@formatjs/intl-pluralrules/locale-data/en';\n\n/*\n  Note: `notation` & `compactDisplay` properties are not supported yet by Safari.\n  Those require the use of a polyfill: https://www.npmjs.com/package/@formatjs/intl-numberformat\n*/\nimport '@formatjs/intl-numberformat/polyfill';\nimport '@formatjs/intl-numberformat/locale-data/en';\n\nconst DEFAULT_LOCALE = 'en-US';\n\nexport const currencyFormatter = (value) => {\n  return {\n    prefix: '$',\n    value: Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n      notation: 'compact',\n      compactDisplay: 'short',\n    }).format(isNaN(value) ? 0 : value),\n  };\n};\n\nexport const numberFormatter = (value) => {\n  const _value = parseLogicalOperation(value);\n  return (\n    _value.operation +\n    Intl.NumberFormat(DEFAULT_LOCALE, {\n      maximumFractionDigits: 1,\n      minimumFractionDigits: 0,\n      notation: 'compact',\n      compactDisplay: 'short',\n    }).format(_value.value)\n  );\n};\n\nconst parseLogicalOperation = (value) => {\n  if (!isNaN(value)) return { value, operation: '' };\n\n  try {\n    const _value = value.replace('>', '');\n    return isNaN(_value)\n      ? { value: 0, operation: '' }\n      : { value: _value, operation: '> ' };\n  } catch {\n    throw new Error(`You are using a numberFormatter on a not valid value: ${value}`);\n  }\n};\n","import { useSelector } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\n\nexport const USA_DEMOGRAPHICS_LAYER_ID = 'usaDemographicsLayer';\n\nexport default function UsaDemographicsLayer() {\n  const { usaDemographicsLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, usaDemographicsLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n\n  if (usaDemographicsLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: USA_DEMOGRAPHICS_LAYER_ID,\n      getFillColor: [241, 109, 122],\n      pointRadiusMinPixels: 2,\n      pickable: true,\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n","import { useSelector } from 'react-redux';\nimport { CartoLayer } from '@deck.gl/carto';\nimport { selectSourceById } from '@carto/react-redux';\nimport { useCartoLayerProps } from '@carto/react-api';\nimport htmlForFeature from 'utils/htmlForFeature';\n\nexport const STORES_LAYER_ID = 'storesLayer';\n\nexport default function StoresLayer() {\n  const { storesLayer } = useSelector((state) => state.carto.layers);\n  const source = useSelector((state) => selectSourceById(state, storesLayer?.source));\n  const cartoLayerProps = useCartoLayerProps({ source });\n\n  if (storesLayer && source) {\n    return new CartoLayer({\n      ...cartoLayerProps,\n      id: STORES_LAYER_ID,\n      getFillColor: [255, 255, 100],\n      pointRadiusMinPixels: 2,\n      pickable: true,\n      onHover: (info) => {\n        if (info?.object) {\n          info.object = {\n            html: htmlForFeature({ feature: info.object }),\n            style: {},\n          };\n        }\n      },\n    });\n  }\n}\n","import { MAP_TYPES } from '@deck.gl/carto';\n\nconst STORES_SOURCE_ID = 'storesSource';\n\nconst source = {\n  id: STORES_SOURCE_ID,\n  type: MAP_TYPES.QUERY,\n  connection: 'carto_dw',\n  data: 'SELECT * FROM cartobq.public_account.retail_stores',\n};\n\nexport default source;\n","import { MAP_TYPES } from '@deck.gl/carto';\n\nconst USA_DEMOGRAPHICS_SOURCE_ID = 'usaDemographicsSource';\n\nconst source = {\n  id: USA_DEMOGRAPHICS_SOURCE_ID,\n  type: MAP_TYPES.TILESET,\n  connection: 'bqapp',\n  data: 'cartodb-on-gcp-pm-team.atena.airports_test_w_geo_tileset',\n};\n\nexport default source;\n","import { useEffect } from 'react';\nimport { USA_DEMOGRAPHICS_LAYER_ID } from 'components/layers/UsaDemographicsLayer';\nimport storesSource from 'data/sources/storesSource';\nimport usaDemographicsSource from 'data/sources/usaDemographicsSource';\nimport { STORES_LAYER_ID } from 'components/layers/StoresLayer';\nimport { useDispatch } from 'react-redux';\nimport { addLayer, removeLayer, addSource, removeSource } from '@carto/react-redux';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\n\nimport { Divider } from '@material-ui/core';\nimport { AggregationTypes } from '@carto/react-core';\nimport { FormulaWidget, CategoryWidget } from '@carto/react-widgets';\nimport { currencyFormatter } from 'utils/formatter';\n\nconst useStyles = makeStyles(() => ({\n  stores: {},\n}));\n\nexport default function Stores() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    dispatch(addSource(storesSource));\n    dispatch(addSource(usaDemographicsSource));\n    dispatch(\n      addLayer({\n        id: USA_DEMOGRAPHICS_LAYER_ID,\n        source: usaDemographicsSource.id,\n      })\n    );\n\n    dispatch(\n      addLayer({\n        id: STORES_LAYER_ID,\n        source: storesSource.id,\n      })\n    );\n\n    return () => {\n      dispatch(removeLayer(STORES_LAYER_ID));\n      dispatch(removeLayer(USA_DEMOGRAPHICS_LAYER_ID));\n      dispatch(removeSource(storesSource.id));\n    };\n  }, [dispatch]);\n\n  // [hygen] Add useEffect\n\n  return (\n    <Grid container direction='column' className={classes.stores}>\n      <Grid item>\n        <div>\n          <FormulaWidget\n            id='totalRevenue'\n            title='Total revenue'\n            dataSource={storesSource.id}\n            column='revenue'\n            operation={AggregationTypes.SUM}\n            formatter={currencyFormatter}\n          />\n\n          <Divider />\n\n          <CategoryWidget\n            id='revenueByStoreType'\n            title='Revenue by store type'\n            dataSource={storesSource.id}\n            column='storetype'\n            operationColumn='revenue'\n            operation={AggregationTypes.SUM}\n            formatter={currencyFormatter}\n          />\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}